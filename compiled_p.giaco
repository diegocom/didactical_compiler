@@DIRETTIVE INTERPRETE;;
--DEBUG MODE ON;;
--PRINT ENV ON;;
--PRINT STORE ON;;
--SAFE MODE OFF;;
@@TIPI PRIMITIVI;;
5;;
true;;
"prova";;
@@OPERAZIONI SU BOOL;;
true or false;;
true and false;;
!true;;
@@OPERAZIONI SU INT;;
-7;;
5 * 8;;
5 + 2;;
3 - 2;;
@@TEST SU INT;;
5 == 8;;
iszero (7);;
@@ESPRESSIONI COMPOSTE;;
if( true) then print((true)) else print((false));;
@@DICHIARAZIONI VARIABILI;;
eint p = (10,T);;
eint temp = (0,U);;
while(p!= 0) do (temp = temp + 1; p = p - 1);;
p = temp;;
estring a = "prova";;
ebool b = true;;
ebool tempt = (true,U);;
ebool tempf = (false, U);;
cif(b) then (b = tempt) else (b = tempf);;
@@ASSEGNAMENTO;;
p = 1;;
a = "prova1";;
b = false;;
@@COSTANTI;;
const estring costante = "aa";;
@@costante = "bb";;
eint (5,T) * eint (6,U);;
@@FUNZIONI NELL'AMBIENTE;;
@@NORMALI;;
let rec function fact(x) = (if( x == 0) then 1 else x * runf fact(x - 1)) in print((runf fact(5)));;
@@FUNZIONI RICHIAMABILI @@RICORSIVE;;
rec function factm(x) = (if( x == 0) then 1 else x * runf factm(x - 1));;
print((runf factm(5)));;
@@NORMALI;;
function fr(x) = if( true) then 1 else 2;;
@@CHIAMATA FUNZIONE;;
print((runf fr(10)));;
@@PROCEDURE;;
eint t = 5;;
eint temp = (0,U);;
while(t!= 0) do (temp = temp + 1; t = t - 1);;
t = temp;;
eint y = 0;;
eint temp = (0,U);;
while(y!= 0) do (temp = temp + 1; y = y - 1);;
y = temp;;
rec function fact(x) = if( x == 0) then 1 else x * (runf fact(x - 1));;
procedure impfact(x) = {
eint temp = (0,U);
eint z = x;eint temp = (0,U);
eint w = 1,
temp = (0,U);
while(w!= 0) do (temp = temp + 1; w = w - 1);
w = temp;

temp = (0,U);
while(z!= 0) do (temp = temp + 1; z = z - 1);
z = temp;
while(!(z == 0)) do (w = z * w;z = z - 1);cif( (w == (runf fact(x)))) then (y = w) else (y = 0)
};;
@@CHIAMATA PROCEDURE;;
runp impfact(t);;
print(y);;
@@FUNZIONI AUSILIARIE SU STRINGHE;;
len("prova");;
substr("prova",2,3);;
"ciao"."prova";;
@@COMANDI;;
eint c = 5;;
eint temp = (0,U);;
while(c!= 0) do (temp = temp + 1; c = c - 1);;
c = temp;;
c = 8;;
cif( (true)) then c = 7;c = 8;c = 9 else c = 9;;
while(c != 0) do (c = c - 1);;
@@BLOCCHI;;
{
eint temp = (0,U);
eint pippo = 50,[],
temp = (0,U);
while(pippo!= 0) do (temp = temp + 1; pippo = pippo - 1);
pippo = temp;
pippo = 100
};;
@@FUNZIONE DI REFLECT;;
print((eint (5,U)));;
print((eint (7,U)));;
print((eint (9,U)));;
eint tai = (10,U);;
eint temp = (0,U);;
while(tai!= 0) do (temp = temp + 1; tai = tai - 1);;
tai = temp;;
5;;
print((5));;
@@ASSEGNAMENTO SICURO;;
eint paolo = 5;;
eint temp = (0,U);;
while(paolo!= 0) do (temp = temp + 1; paolo = paolo - 1);;
paolo = temp;;
eint pippo = paolo;;
eint temp = (0,U);;
while(paolo!= 0) do (temp = temp + 1; paolo = paolo - 1);;
paolo = temp;;
paolo = pippo;;
@@ASSEGNAMENTO NON SICURO;;
eint a = (7,T);;
eint temp = (0,U);;
while(a!= 0) do (temp = temp + 1; a = a - 1);;
a = temp;;
eint b = (0,U);;
eint temp = (0,U);;
while(b!= 0) do (temp = temp + 1; b = b - 1);;
b = temp;;
b = a;;
ebool d = (true,T);;
ebool tempt = (true,U);;
ebool tempf = (false, U);;
cif(d) then (d = tempt) else (d = tempf);;
ebool e = (false,U);;
ebool tempt = (true,U);;
ebool tempf = (false, U);;
cif(e) then (e = tempt) else (e = tempf);;
e = d;;
